@page
@model GeoClinet.Pages.set.IndexModel

@{
    ViewData["Title"] = "List of Set Question";
}

<div class="content">
    <div class="container w-[90%] mx-auto py-8 mb-8 items-center justify-center">
        <div class="flex justify-between items-center mb-8">
            <h2 class="text-2xl font-bold mb-4">@ViewData["Title"]</h2>
            <button class="btn btn-success" onclick="openAddModal()">
                <img src="~/css/plus-circle.svg" class="mr-2" />
                <span class="text-white">Create New Set Question</span>
            </button>
        </div>

        <!-- Search Form -->
        <form method="get" class="m-xl-auto">
            <div class="flex">
                <div class="mr-8">
                    <input id="searchInput" type="text" name="SearchTerm" value="@Model.SearchTerm" placeholder="Search Set Name Ctrl + K" class="input input-bordered w-64 md:w-auto" />
                </div>
                <div class="pt-4">
                </div>
            </div>

            <input type="submit" value="Search" style="display:none;" />

            <script>
                document.addEventListener('keydown', function (event) {
                    // Check if the 'Ctrl' key and 'K' key are pressed together
                    if (event.ctrlKey && event.key === 'k') {
                        event.preventDefault(); // Prevent the default browser action
                        document.getElementById('searchInput').focus(); // Set focus to the search input
                    }
                });
            </script>
        </form>

        <div class="w-full mt-8">
            @if (Model.SetQuestions != null && Model.SetQuestions.Any())
            {
                <table class="table w-full rounded-box table-auto">
                    <thead>
                        <tr>
                            <th class="font-semibold p-4 relative pr-6 text-left">Set ID</th>
                            <th class="font-semibold p-4 relative pr-6 text-left">User ID</th>
                            <th class="font-semibold p-4 relative pr-6 text-left">Set Name</th>
                            <th class="font-semibold p-4 relative pr-6 text-left">Question Number</th>
                            <th class="font-semibold p-4 relative pr-6 text-left">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.SetQuestions)
                        {
                            <tr class="bg-base-100 hover">
                                <td class="font-semibold p-4 relative pr-6 break-words">@item.Id</td>
                                <td class="font-semibold p-4 relative pr-6 break-words">@item.UserId</td>
                                <td class="font-semibold p-4 relative pr-6 break-words">@item.SetName</td>
                                <td class="font-semibold p-4 relative pr-6 break-words">@item.QuestionNumber</td>
                                <td class="flex flex-grow font-semibold p-4 relative pr-6 break-words">
                                    <button class="mr-2" onclick="openEditModal(this)" data-id="@item.Id" data-setname="@item.SetName" data-questionnumber="@item.QuestionNumber">
                                        <i data-feather="edit" aria-hidden="true" class="text-success text-2xl"></i>
                                    </button>
                                    <button onclick="openDeleteModal('@item.Id')">
                                        <i data-feather="trash-2" aria-hidden="true" class="text-error text-2xl"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No set questions found.</p>
            }
        </div>
    </div>
</div>

<!-- Add Dialog -->
<dialog id="addModal" class="modal">
    <form method="post" asp-page-handler="Add" class="modal-box" id="addForm">
        <div class="flex">
            <i data-feather="plus-circle" aria-hidden="true" class="text-neutral text-2xl mr-2"></i>
            <h3 class="font-bold text-lg">Add New Set Question</h3>
        </div>
        <div id="add-error" class="text-danger"></div>
        <div class="form-control">
            <label class="label">User ID</label>
            <input type="text" name="SetQuestion.UserId" class="input input-bordered" value="@ViewData["CurrentUserId"]" readonly>
        </div>
        <div class="form-control">
            <label class="label">Set Name</label>
            <input type="text" name="SetQuestion.SetName" class="input input-bordered" required>
        </div>
        <div class="form-control">
            <label class="label">Question Number</label>
            <input type="number" name="SetQuestion.QuestionNumber" class="input input-bordered" required>
        </div>
        <div class="modal-action">
            <button type="submit" class="btn btn-success w-24 text-white">Create</button>
            <button type="button" class="btn btn-outline w-24" onclick="closeAddModal()">Cancel</button>
        </div>
    </form>
</dialog>

<!-- Edit Dialog -->
<dialog id="editModal" class="modal">
    <form method="post" asp-page-handler="Edit" class="modal-box" id="editForm">
        <div class="flex">
            <i data-feather="edit" aria-hidden="true" class="text-neutral text-2xl mr-2"></i>
            <h3 class="font-bold text-lg">Edit Set Question</h3>
        </div>
        <input type="hidden" id="edit-id" name="SetQuestion.Id">
        <div id="edit-error" class="text-danger"></div>
        <div class="form-control">
            <label class="label">User ID</label>
            <input type="text" name="SetQuestion.UserId" class="input input-bordered" value="@ViewData["CurrentUserId"]" readonly>
            <span asp-validation-for="SetQuestion.UserId" class="text-danger"></span>
        </div>
        <div class="form-control">
            <label class="label">Set Name</label>
            <input type="text" id="edit-setname" name="SetQuestion.SetName" class="input input-bordered" required>
            <span asp-validation-for="SetQuestion.SetName" class="text-danger"></span>
        </div>
        <div class="form-control">
            <label class="label">Question Number</label>
            <input type="number" id="edit-questionnumber" name="SetQuestion.QuestionNumber" class="input input-bordered" required>
            <span asp-validation-for="SetQuestion.QuestionNumber" class="text-danger"></span>
        </div>
        <div class="modal-action">
            <button type="submit" class="btn btn-success w-24 text-white">Save</button>
            <button type="button" class="btn btn-outline w-24" onclick="closeEditModal()">Cancel</button>
        </div>
    </form>
</dialog>

<!-- Delete Dialog -->
<dialog id="deleteModal" class="modal">
    <form method="post" asp-page-handler="Delete" class="modal-box">
        <h3 class="font-bold text-lg">Are you sure you want to delete this set question?</h3>
        <input type="hidden" id="delete-id" name="id">
        <div class="modal-action">
            <button type="submit" class="btn btn-error w-24 text-white">Delete</button>
            <button type="button" class="btn btn-outline w-24" onclick="closeDeleteModal()">Cancel</button>
        </div>
    </form>
</dialog>


   
    <script>
        

        function openAddModal() {
            document.getElementById('addModal').showModal();
        }

        function closeAddModal() {
            document.getElementById('add-error').innerText = '';
            document.getElementById('addForm').reset();
            document.getElementById('addModal').close();
        }

        function openEditModal(button) {
            var id = button.getAttribute('data-id');
            var setName = button.getAttribute('data-setname');
            var questionNumber = button.getAttribute('data-questionnumber');

            document.getElementById('edit-id').value = id;
            document.getElementById('edit-setname').value = setName;
            document.getElementById('edit-questionnumber').value = questionNumber;
            document.getElementById('editModal').showModal();
        }

        function closeEditModal() {
            document.getElementById('edit-error').innerText = '';
            document.getElementById('editForm').reset();
            document.getElementById('editModal').close();
        }

        function openDeleteModal(id) {
            document.getElementById('delete-id').value = id;
            document.getElementById('deleteModal').showModal();
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').close();
        }

        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('addForm').addEventListener('submit', function (event) {
                event.preventDefault(); // Ngăn chặn gửi yêu cầu mặc định của form

                var form = event.target;
                var formData = new FormData(form);

                fetch(form.action, {
                    method: 'POST',
                    body: formData
                })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(errors => Promise.reject(errors));
                        }
                        return response;
                    })
                    .then(() => {
                        closeAddModal();
                        location.reload();
                    })
                    .catch(errors => {
                        var errorMessages = Object.values(errors).join('\n');
                        document.getElementById('add-error').innerText = errorMessages;
                    });
            });

            document.getElementById('editForm').addEventListener('submit', function (event) {
                event.preventDefault(); // Ngăn chặn gửi yêu cầu mặc định của form

                var form = event.target;
                var formData = new FormData(form);

                fetch(form.action, {
                    method: 'POST',
                    body: formData
                })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(errors => Promise.reject(errors));
                        }
                        return response;
                    })
                    .then(() => {
                        closeEditModal();
                        location.reload();
                    })
                    .catch(errors => {
                        var errorMessages = Object.values(errors).join('\n');
                        document.getElementById('edit-error').innerText = errorMessages;
                    });
            });
        });
    </script>
